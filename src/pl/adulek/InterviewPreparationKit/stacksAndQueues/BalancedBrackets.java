package pl.adulek.InterviewPreparationKit.stacksAndQueues;

import java.util.LinkedList;

public class BalancedBrackets {

    public static String isBalanced(String s) {
        final String NO = "NO";
        LinkedList<Character> bracketStack = new LinkedList<>();
        for (int i = 0; i < s.length(); ++i) {
            char c = s.charAt(i);
            if (c == '{' || c == '[' || c == '(') {
                bracketStack.add(c);
            } else { // if is closing
                if (bracketStack.isEmpty()) {
                    return NO;
                }
                char charOnTop = bracketStack.removeLast();
                if (c == '}') {
                    if (charOnTop != '{') {
                        return NO;
                    }
                } else if (c == ']') {
                    if (charOnTop != '[') {
                        return NO;
                    }
                } else { // if c == )
                    if (charOnTop != '(') {
                        return NO;
                    }
                }
            }
        }
        if (bracketStack.isEmpty()) {
            return "YES";
        }
        return NO;
    }

    public static void main(String[] args) {
        System.out.println(isBalanced("{[()]}"));
        System.out.println(isBalanced("{[(])}"));
        System.out.println(isBalanced("{{[[(())]]}}"));
        System.out.println(isBalanced("{}{}{}[([]{}{})]{}()()[[[]][()[]]]()[][]{}({}{()}([]{})()){[]}(([([]{{}({{[[()[][]]]}({[][()]{}}{}(){}){}([])}{()()})})]{()([])}[]))([{}()()])([]){}[{()()}][{}[[]()]({{([{}{}[]{()}[]])[(){([])}()][]}}){}()[]][[()]]([](()[][]){(({})[]{}){}}{{{}}})[()]{{((())){()[](){(({{}{}()[{([((()))]())}]{{([])}[()]{{}()}}}()())())}}{()}}[(()(())((({{{{}}[]}})[[{[]((){()}[]([[]])({{([[{}[]]]([{}((){[[](){}{{}}]})[][({{}}()((([[][{}]]))))()[]()][()]{}()()]())([][]{[[{}[]()]]{}[]}))}}))}[]]{}])))({})]}()[{()}][][[]]()[{{(([])){()}}}((){}[])]{[][]([()])}([]){}{(()){{}}}{()}{{{}({[()()()]}(((){[[(())]]{[]}{{}{}[][()][{{[]}{}{}({})[]}[]]}([])({})[[]]()})))}()}(())()(){[]((()[]))}{[][{}]}((())){}{}{}{}{[{}()][{()}][]}{}[{{}[({({}{()})}){{}}{{{{}}}[]}(([]())[])({[]}{}{})]}]{}{[[([])]{((){{{}{[]}}[[(()[()[{[]()[[()]{{[[]]}[[[]{((){})}[{()[]}]{[{()}]}]]}()]}]({{[]{}[]}}[(()[{{}}])()]{{}()}({{}}(({})[])[[{({}{[{[[{{(({{{}}(){{{}}}}()))}()}]{(({{}}){}())()}]()}{}]{}{{[]{}[[(([]))]][]({}[]()())}}})}]]))])]]})}]}"));
        System.out.println(isBalanced(")])){}){({)]][[[({]}{{({{]]{{])]]([)](}{([[{[(]}(})([){{])[)]}))]{(([})([}][(}[(){{({][])({({]()(}[[{)][([{{(({}[[]{])(([]){)([[)({}()[(]}}]][)[{[{}{[){[}){{]}{){)([({}}}{{]]}]{]}(]]]}[{(}([((]([({)}][])[){[({))[(]{}){)){]]{((}({]({[]{(})}{][{](][((]}[])}[[][])){[)(])()}}{]{})}){]](]}[)([)})]({)]][[]{}}[]](][}()}][})([))}){){]]]][]}][[}[}{[)[}([)}]())(}(){)](}}}())}}}}{{}(}}{())(([)()))(}([)(())}]}}}]{)()[{)(](])((}][]){])[([]}][(())[][([)()))(}}{){}((){}[])({[(}(}{)(}{)([{]{[[)(}}(])]))[[}{{){[)(])([)[()(}){)[]}][[(){)))[{{{})]))}{([}(([}{{(}(}(}}[(}]}}((]{{][([[){{{}})((}(}{({[{})([}))]{[)){(})}{){}())(({()()]}{({]}]{]}([{}}{))}((]{)})[(}}))})[[{()[[{]]{[{[[{)[}})[[((}]((]][{}]](([([)]]((({{[)]{[(([]]}[]]]){({[}]])[((){{}[{][{[(]]{{[)[}[(}[}[}{([{[)({){[)](){}([({(([(}[(})(]{[{){{)]()(([{(]}[}))])](}(}]]){}}(}{}()[)[)]{}]]([[(({](]]([]{})[({[]([)]({])(((][)[([[{{([][][{)[(][[])(][)}[({(}}()}[{}]}]}[)){}}(([[((}[([[{)]]{(]}}[[(}}{){]{(]({)[())([]{{{[((][))}[{])]])]]]}}[}{}[])(}(]}}]}}"));
    }
}
